apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

def VERSION = "4.1.8"
project.version = VERSION

android {
    compileSdkVersion BuildSettings.compileSdkVersion

    defaultConfig {
        minSdkVersion BuildSettings.minSdkVersion
        targetSdkVersion BuildSettings.targetSdkVersion
        versionCode 1
        versionName VERSION

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            testCoverageEnabled = true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        encoding = 'UTF-8'
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'LICENSE.txt'
    }
    sourceSets {
        test.java.srcDirs += "src/androidTest/java"
    }
}

android.libraryVariants.all { variant ->
    if (variant.buildType.isDebuggable()) {
        return; // Skip debug builds.
    }
    task("javadoc${variant.name.capitalize()}", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompile.source

        // Add all of your dependencies and android jars to the classpath
        classpath += files(variant.javaCompile.classpath.files)
        classpath += files(android.getBootClasspath())
        exclude '**/BuildConfig.java'
        exclude '**/R.java'

        options.links("http://docs.oracle.com/javase/7/docs/api/")
        options.linksOffline("http://d.android.com/reference", "${android.sdkDirectory}/docs/reference")
        options.charSet("utf-8")
    }

    task("bundleJavadoc${variant.name.capitalize()}", type: Jar) {
        description "Bundles Javadoc into zip for $variant.name."
        classifier = "javadoc"
        from tasks["javadoc${variant.name.capitalize()}"]
    }
}

dependencies {
    api Libs.sqlite
    implementation Libs.jsr305

    testImplementation TestLibs.hamcrest
    testImplementation TestLibs.robolectric
    testImplementation TestLibs.androidXTestCore
    testImplementation TestLibs.androidXTestRunner
    testImplementation TestLibs.androidXTestJUnit

    androidTestImplementation TestLibs.hamcrest
    androidTestImplementation TestLibs.androidXTestCore
    androidTestImplementation TestLibs.androidXTestRunner
    androidTestImplementation TestLibs.androidXTestJUnit
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task androidJavadocJar(type: Jar) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

artifacts {
    archives androidSourcesJar
    archives androidJavadocJar
}
